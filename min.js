/*! (c) Andrea Giammarchi (ISC) */var regularElements=function(a){"use strict";var e,t={};function n(e,t){t||(t={});var n=a.createEvent("CustomEvent");return n.initCustomEvent(e,!!t.bubbles,!!t.cancelable,t.detail),n}t.CustomEvent="function"==typeof CustomEvent?CustomEvent:(n[e="prototype"]=new n("").constructor[e],n);var i=t.CustomEvent,o={};try{o.WeakSet=WeakSet}catch(e){!function(t){var n=new t,e=r.prototype;function r(e){n.set(this,new t),e&&e.forEach(this.add,this)}e.add=function(e){return n.get(this).set(e,1),this},e.delete=function(e){return n.get(this).delete(e)},e.has=function(e){return n.get(this).has(e)},o.WeakSet=r}(WeakMap)}var r,c=o.WeakSet,d=Object.assign||function(e){for(var t,n=1;n<arguments.length;n++)for(var r in t=arguments[n]||{})t.hasOwnProperty(r)&&(e[r]=t[r]);return e},u=(r=[].indexOf,"matches"in a.documentElement?function(e){return this.matches(e)}:function(e){var t=this;return(t.matchesSelector||t.webkitMatchesSelector||t.khtmlMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||function(e){var t=this.parentNode;return!!t&&-1<r.call(t.querySelectorAll(e),this)}).call(t,e)});var s,l,f,h,v,m,b,g,E,p={Event:i,WeakSet:c},w=a.contains||function(e){for(;e&&e!==this;)e=e.parentNode;return this===e},y=!0,N=[],S=[],M={},O={},k={define:function(e,t){y&&(y=!1,function(t){try{new MutationObserver(V).observe(t,{subtree:!0,childList:!0})}catch(e){t.addEventListener("DOMNodeInserted",function(e){V([{addedNodes:[e.target]}])},!1)}"complete"!==t.readyState&&t.addEventListener("DOMContentLoaded",x,{once:!0})}(a));var n=typeof e;if("string"==n){if(q(e))throw new Error("duplicated: "+e);if(N.push(e),S.push(t||{}),x(),e in M){var r=q(e);r&&(M[e](r),delete M[e])}}else{if("object"!=n||1!==e.nodeType)throw new Error("undefinable: "+e);I(e,t||{})}},get:q,whenDefined:function(t){return Promise.resolve(q(t)||new Promise(function(e){M[t]=e}))}},L=(f="dis"+(l="connected"),h=(s=p).Event,v=s.WeakSet,m=!0,b=null,function(e){return m&&(m=!m,b=new v,function(t){var c={};c[l]=new v,c[f]=new v;try{new MutationObserver(a).observe(t,{subtree:!0,childList:!0})}catch(e){var n=0,r=[],o=function(e){r.push(e),clearTimeout(n),n=setTimeout(function(){a(r.splice(n=0,r.length))},0)};t.addEventListener("DOMNodeRemoved",function(e){o({addedNodes:[],removedNodes:[e.target]})},!0),t.addEventListener("DOMNodeInserted",function(e){o({addedNodes:[e.target],removedNodes:[]})},!0)}function a(e){for(var t,n=e.length,r=0;r<n;r++)i((t=e[r]).removedNodes,f,l),i(t.addedNodes,l,f)}function i(e,t,n){for(var r,o=new h(t),a=e.length,i=0;i<a;1===(r=e[i++]).nodeType&&d(r,o,t,n));}function d(e,t,n,r){b.has(e)&&!c[n].has(e)&&(c[r].delete(e),c[n].add(e),e.dispatchEvent(t));for(var o=e.children||[],a=o.length,i=0;i<a;d(o[i++],t,n,r));}}(e.ownerDocument)),b.add(e),e}),C={attributechanged:(g=p,E=g.Event,function(t,e){var n={attributes:!0,attributeOldValue:!0},r=e instanceof Array&&e.length;r&&(n.attributeFilter=e.slice(0));try{new MutationObserver(A).observe(t,n)}catch(e){n.handleEvent=r?T:D,t.addEventListener("DOMAttrModified",n,!0)}return t}),connected:L,disconnected:L};function D(e){W(e.target,e.attrName,e.prevValue)}function W(e,t,n){var r=new E("attributechanged");r.attributeName=t,r.oldValue=n,r.newValue=e.getAttribute(t),e.dispatchEvent(r)}function A(e){for(var t,n=0,r=e.length;n<r;n++)W((t=e[n]).target,t.attributeName,t.oldValue)}function T(e){-1<this.attributeFilter.indexOf(e.attrName)&&D(e)}function V(e){for(var t=0,n=e.length;t<n;t++)P(e[t].addedNodes,!1)}function q(e){var t=N.indexOf(e);return t<0?null:d({},S[t])}function x(){N.length&&P(a.querySelectorAll(N),!0)}function F(e){P(e.querySelectorAll(N),!0);for(var t,n,r=0,o=N.length;r<o;r++)n=N[r],!(t=O[n]||(O[n]=new c)).has(e)&&u.call(e,N[r])&&(t.add(e),I(e,S[r]))}function P(e,t){for(var n,r=0,o=e.length;r<o;r++)n=e[r],!t&&1!==n.nodeType||F(n)}function j(e,t,n,r){var o=t["on"+n];o&&(C[n](e,t.attributeFilter).addEventListener(n,o,!1),r&&w.call(a,e)&&e.dispatchEvent(new i(n)))}function I(e,t){j(e,t,"attributechanged",!1),j(e,t,"disconnected",!1),j(e,t,"connected",!0)}return k}(document);
